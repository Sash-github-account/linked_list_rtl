module ll_nxt_ptr_logic(
			input logic 		      clk,
			input logic 		      reset_n,
			input logic 		      wr_vld,
			input logic 		      wr_insert,
			input logic [WR_ADDR_WD-1:0]  wr_pos,
			input logic [WR_DATA_WD-1:0]  wr_data_nxt_ptr,
			input logic 		      rd_vld,
			input logic [RD_ADDR_WD-1:0]  rd_addr,
			output logic 		      wr_done,
			output logic [RD_DATA_WD-1:0] rd_data,
			output logic 		      rd_data_out_vld
			);

   logic [WR_DATA_WD-1:0] 			      nxt_ptr_mem [DATA_DEPTH:0];
   genvar 					      i;
   

   always_ff@(posedge clk) begin
      if(reset_n) begin
	 wr_done <= 0;
	 
	 for (i=0; i < DATA_DEPTH-1; i = i +1) begin
	    nxt_ptr_mem[i] <= 0;
	 end
      end
      else begin
	 
	 if(wr_vld) begin
	    if(!wr_insert) begin
	       wr_done <= 1;	    
	       nxt_ptr_mem[wr_addr] <= wr_data;
	    end
	    else begin
	       
	       for ( i=0; i < DATA_DEPTH-1; i = i +1) begin
		  if(i > wr_pos) nxt_ptr_mem[i] <= nxt_ptr_mem[i+1];
		  else if(i == wr_pos) nxt_ptr_mem[i] <= wr_data_nxt_ptr;		  
		  else nxt_ptr_mem[i] <= nxt_ptr_mem[i];
		  
	       end
	    end
	    
	 end	 
	 else nxt_ptr_mem <= nxt_ptr_mem;

	 if(rd_vld) begin
	    rd_data <= nxt_ptr_mem[rd_addr];
	    rd_data_out_vld <= 1;
	 end
	 else begin
	    rd_data_out_vld <= 0;
	 end
	 
      end             
   end
   
endmodule
